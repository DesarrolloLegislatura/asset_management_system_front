# Nombre del Workflow: Aparecer√° en la pesta√±a "Actions" de tu repositorio en GitHub.
name: Deploy to Server FichaTecnica Frontend

# Disparador (Trigger): Cu√°ndo se debe ejecutar este workflow.
on:
  push:
    # Se ejecutar√° solo en pushes a la rama 'main'.
    # Si en el futuro usas 'main' o 'master' para producci√≥n, c√°mbialo aqu√≠.
    branches:
      - main

# Trabajos (Jobs): Las tareas que se van a realizar. Puedes tener varios jobs.
jobs:
  # Definimos un √∫nico job que llamamos 'deploy'.
  deploy:
    # Entorno de ejecuci√≥n: Le pedimos a GitHub una m√°quina virtual con la √∫ltima versi√≥n de Ubuntu.
    runs-on: ubuntu-latest

    # Pasos (Steps): La secuencia de acciones que se ejecutar√°n dentro del job.
    steps:
      # Paso 1: Descargar el c√≥digo del repositorio
      - name: Checkout code
        # Usa una acci√≥n pre-construida por GitHub para descargar tu c√≥digo en la m√°quina virtual.
        uses: actions/checkout@v3

      # Paso 2: Conexi√≥n SSH y despliegue en el servidor
      - name: SSH and Deploy
        # Usa una acci√≥n popular de la comunidad para manejar la conexi√≥n SSH.
        uses: appleboy/ssh-action@master
        # Configuraci√≥n de la acci√≥n SSH:
        with:
          # Aqu√≠ usamos los "Secrets" que configuraste en GitHub.
          # La sintaxis ${{ secrets.NOMBRE_DEL_SECRETO }} es la forma segura de acceder a ellos.
          host: ${{ secrets.SSH_HOST }} # La IP o dominio de tu servidor.
          username: ${{ secrets.SSH_USER }} # Tu nombre de usuario en el servidor.
          key: ${{ secrets.SSH_PRIVATE_KEY }} # La clave SSH privada para la autenticaci√≥n.

          # Script: Los comandos que se ejecutar√°n en tu servidor una vez conectado.
          script: |
            # Navega a la carpeta del proyecto en tu servidor.
            cd ${{ secrets.PROJECT_PATH }}

            # 1. Trae los √∫ltimos cambios desde el repositorio de GitHub.
            git pull
            echo "‚úÖ Cambios descargados desde el repositorio."

            # 2. Detiene y elimina los contenedores actuales (si est√°n corriendo).
            docker-compose down
            echo "‚úÖ Contenedores anteriores detenidos."

            # 3. Construye las nuevas im√°genes (si es necesario) y levanta los nuevos contenedores.
            # --build: Reconstruye las im√°genes si el Dockerfile ha cambiado.
            # -d: Ejecuta los contenedores en segundo plano (detached mode).
            docker-compose up --build -d
            echo "üöÄ Aplicaci√≥n desplegada exitosamente."
